# ZSH Theme - Preview: http://cl.ly/f701d00760f8059e06dc
# Thanks to gallifrey, upon whose theme this is based

function prompt_yut23_setup {
  local exit_code="%(?..%{$fg_bold[red]%}%?%{$reset_color%})"
  prompt_opts=(cr sp percent subst)

  local -a groups
  groups=($(id -G))
  local is_root=
  local prompt_symbol user_color
  # check if gid 0 is present in the groups array
  if (( ${+groups[(r)0]} )); then
    prompt_symbol="%{$fg_bold[red]%}#%{$reset_color%}"
    user_color="$fg_bold[red]"
  else
    prompt_symbol='\$'
    user_color="$fg[green]"
  fi
  if (( SHLVL > 1 )); then
    prompt_symbol="$SHLVL$prompt_symbol"
  fi
  local user="%{$user_color%}%n%{$reset_color%}"

  # different color for ssh session
  if [[ -n "${SSH_CONNECTION+1}" ]]; then
    # ssh
    local host="%{$fg[cyan]%}@$HOSTNAME%{$reset_color%}"
  else
    # local
    local host="%{$fg[green]%}@$HOSTNAME%{$reset_color%}"
  fi
  local current_dir="%{$fg[yellow]%}%~%{$reset_color%}"
  local git_prompt='$(_my_git_prompt_info)'
  local throttled=''
  if [[ $system_name == summit && -e "/sys/fs/cgroup/cpu/user.slice/user-$UID.slice" ]]; then
    throttled='$(_check_throttled)'
  fi

  PS1="
${user}${host}${throttled} ${current_dir} ${git_prompt}
${prompt_symbol} "
  RPS1="%{$fg[green]%}\$(_virtualenv_info)%{$reset_color%}${exit_code}"

  zle -N zle-keymap-select
  zle -N zle-line-finish
}

function _virtualenv_info {
  if [[ -n "$CONDA_DEFAULT_ENV" ]]; then
    echo "($CONDA_DEFAULT_ENV) "
  elif [[ -n "$VIRTUAL_ENV" ]] then
    echo "%{$fg[blue]%}(${VIRTUAL_ENV:t}) "
  fi
}

function _check_throttled {
  local quota=$(<"/sys/fs/cgroup/cpu/user.slice/user-$UID.slice/cpu.cfs_quota_us")
  local period=$(<"/sys/fs/cgroup/cpu/user.slice/user-$UID.slice/cpu.cfs_period_us")
  if (( quota / period != 16 )); then
    echo " %{$fg_bold[red]%}throttled%{$reset_color%}"
  fi
}

function zle-keymap-select {
  zle reset-prompt
  case $TERM in
    linux|dumb) ;;
    *) [[ $KEYMAP == 'vicmd' ]] && printf '\033[1 q' || printf '\033[5 q' ;;
  esac
}

function zle-line-finish {
  case $TERM in
    linux|dumb) ;;
    *)
      printf '\033[5 q'
      # from GRML zshrc
      zle-rmkx
      ;;
  esac
}

function _my_git_prompt_info() {
  # largely based on Prezto's git-info function
  local branch git_status format
  local git_cmd status_cmd
  local ahead=0
  local behind=0
  local gone=0

  local added=0
  local deleted=0
  local modified=0
  local renamed=0
  local unmerged=0
  local untracked=0
  local dirty=0

  # normal array
  local -a format_keys
  format_keys=(
    behind
    ahead
    gone
    unmerged
    deleted
    renamed
    modified
    added
    untracked
  )
  # associative array (unordered)
  local -A symbols
  symbols=(
    behind '↓'
    ahead '↑'
    gone '✗'
    unmerged '?'
    deleted '!'
    renamed '~'
    modified '*'
    added '+'
    untracked '%%'
  )
  [[ $#symbols == $#format_keys ]] || >&2 echo "mismatch between symbols and format_keys"

  # Use porcelain status for easy parsing.
  git_cmd='command git'
  if (( $+commands[etckeeper] )); then
    case $PWD/ in
      /etc/*)
        git_cmd='command sudo -p"[etckeeper] password for %u: " etckeeper vcs' ;;
    esac
  fi
  status_cmd="$git_cmd status --porcelain --branch"

  # Get current status, branch name, and commit differences with a single git call.
  while IFS=$'\n' read line; do
    if [[ -z $branch && "$line" == \#\#\ * ]]; then
      if [[ "$line" =~ '^## ([^ ]*)( \[(ahead ([0-9]+)?)?((, )?behind ([0-9]+))?(gone)?\])?$' ]]; then
        # groups:           1      2   3      4          56           7         8
        branch=${match[1]%...*}
        ahead=${match[4]:-0}
        behind=${match[7]:-0}
        # substitute 1 if non-null, or substitute 0 if null
        gone=${${match[8]:+1}:-0}
      fi
      # don't increment $dirty
      continue
    fi
    # Count added, deleted, modified, renamed, unmerged, untracked, dirty.
    # T (type change) is undocumented, see https://git.io/FnpMGw.
    # For a table of scenarii, see https://i.imgur.com/2YLu1.png.
    [[ "$line" == ([ACDMT][\ MT]|[ACMT]D)\ * ]] && (( added++ ))
    [[ "$line" == [\ ACMRT]D\ * ]] && (( deleted++ ))
    [[ "$line" == ?[MT]\ * ]] && (( modified++ ))
    [[ "$line" == R?\ * ]] && (( renamed++ ))
    [[ "$line" == (AA|DD|U?|?U)\ * ]] && (( unmerged++ ))
    [[ "$line" == \?\?\ * ]] && (( untracked++ ))
    (( dirty++ ))
  done < <(${(Q)${(z)status_cmd}} 2> /dev/null)

  [[ -z $branch ]] && return

  local -A formats
  formats=(
    behind B
    ahead A
    gone G
    unmerged U
    deleted d
    renamed r
    modified m
    added a
    untracked u
  )
  [[ $#formats == $#format_keys ]] || >&2 echo "mismatch between formats and format_keys"

  local -a replacements=()
  for key in ${format_keys[@]}; do
    # check values against 0, and replace with nothing if equal
    # need extra escaping for zformat
    format="$format%0($formats[$key]..${symbols[$key]//\%/%%})"
    replacements+=("$formats[$key]:${(P)key}")
  done
  zformat -f git_status "$format" "${replacements[@]}"

  if [[ -n $git_status ]]; then
    if (( dirty > 0 )); then
      color=red
    else
      color=yellow
    fi
    echo "%{$terminfo[bold]$fg[$color]%}($branch $git_status)%{$reset_color%}"
  else
    echo "%{$terminfo[bold]$fg[green]%}($branch)%{$reset_color%}"
  fi
}

prompt_yut23_setup
# vim: filetype=zsh
